// Generated from E.g4 by ANTLR 4.7.2
package com.runekrauss.parser;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class ELexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		BOOL=39, INTEGER=40, FLOAT=41, STRING=42, IDENTIFIER=43, BUILTINFUNCTION=44, 
		COMMENT=45, WHITESPACE=46, SCOLON=47, DOT=48, COMMA=49, ASSIGN=50, QMARK=51, 
		OPAREN=52, CPAREN=53, OBRACE=54, CBRACE=55, OBRACKET=56, CBRACKET=57, 
		OCBRACKET=58;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
			"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
			"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
			"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
			"T__33", "T__34", "T__35", "T__36", "T__37", "BOOL", "INTEGER", "FLOAT", 
			"STRING", "IDENTIFIER", "BUILTINFUNCTION", "COMMENT", "WHITESPACE", "SCOLON", 
			"DOT", "COMMA", "ASSIGN", "QMARK", "OPAREN", "CPAREN", "OBRACE", "CBRACE", 
			"OBRACKET", "CBRACKET", "OCBRACKET", "LETTER", "DIGIT"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'use'", "'#define'", "'noMain'", "'print'", "'println'", "'if'", 
			"'else'", "'while'", "'asm'", "'invoke'", "'new'", "'pushToStack'", "'setTopOfStack'", 
			"':'", "'return'", "'struct'", "'!'", "'/'", "'*'", "'%'", "'-'", "'+'", 
			"'<<'", "'>>'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&&'", 
			"'||'", "'^'", "'bool'", "'int'", "'float'", "'String'", "'void'", null, 
			null, null, null, null, null, null, null, "';'", "'.'", "','", "'='", 
			"'\"'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'[]'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, "BOOL", "INTEGER", "FLOAT", "STRING", "IDENTIFIER", 
			"BUILTINFUNCTION", "COMMENT", "WHITESPACE", "SCOLON", "DOT", "COMMA", 
			"ASSIGN", "QMARK", "OPAREN", "CPAREN", "OBRACE", "CBRACE", "OBRACKET", 
			"CBRACKET", "OCBRACKET"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public ELexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "E.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2<\u01ce\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7"+
		"\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r"+
		"\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25"+
		"\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\33"+
		"\3\33\3\33\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3 \3"+
		" \3 \3!\3!\3!\3\"\3\"\3#\3#\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&"+
		"\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0132"+
		"\n(\3)\6)\u0135\n)\r)\16)\u0136\3*\3*\3*\3*\3*\3*\3*\5*\u0140\n*\3+\3"+
		"+\7+\u0144\n+\f+\16+\u0147\13+\3+\3+\3,\3,\3,\7,\u014e\n,\f,\16,\u0151"+
		"\13,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3"+
		"-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3"+
		"-\3-\5-\u0181\n-\3.\3.\3.\3.\7.\u0187\n.\f.\16.\u018a\13.\3.\5.\u018d"+
		"\n.\3.\3.\3.\3.\3.\7.\u0194\n.\f.\16.\u0197\13.\3.\3.\3.\3.\3.\3.\3.\7"+
		".\u01a0\n.\f.\16.\u01a3\13.\3.\3.\5.\u01a7\n.\3.\3.\3/\6/\u01ac\n/\r/"+
		"\16/\u01ad\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\63\3\63\3\64\3\64\3\65"+
		"\3\65\3\66\3\66\3\67\3\67\38\38\39\39\3:\3:\3;\3;\3;\3<\3<\3=\3=\5\u0145"+
		"\u0195\u01a1\2>\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31"+
		"\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65"+
		"\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64"+
		"g\65i\66k\67m8o9q:s;u<w\2y\2\3\2\6\4\2\f\f\17\17\5\2\13\f\17\17\"\"\5"+
		"\2C\\aac|\3\2\62;\2\u01de\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2"+
		"\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2"+
		"\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3"+
		"\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2"+
		"\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67"+
		"\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2"+
		"\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2"+
		"\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]"+
		"\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2"+
		"\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2"+
		"\3{\3\2\2\2\5\177\3\2\2\2\7\u0087\3\2\2\2\t\u008e\3\2\2\2\13\u0094\3\2"+
		"\2\2\r\u009c\3\2\2\2\17\u009f\3\2\2\2\21\u00a4\3\2\2\2\23\u00aa\3\2\2"+
		"\2\25\u00ae\3\2\2\2\27\u00b5\3\2\2\2\31\u00b9\3\2\2\2\33\u00c5\3\2\2\2"+
		"\35\u00d3\3\2\2\2\37\u00d5\3\2\2\2!\u00dc\3\2\2\2#\u00e3\3\2\2\2%\u00e5"+
		"\3\2\2\2\'\u00e7\3\2\2\2)\u00e9\3\2\2\2+\u00eb\3\2\2\2-\u00ed\3\2\2\2"+
		"/\u00ef\3\2\2\2\61\u00f2\3\2\2\2\63\u00f5\3\2\2\2\65\u00f7\3\2\2\2\67"+
		"\u00fa\3\2\2\29\u00fc\3\2\2\2;\u00ff\3\2\2\2=\u0102\3\2\2\2?\u0105\3\2"+
		"\2\2A\u0108\3\2\2\2C\u010b\3\2\2\2E\u010d\3\2\2\2G\u0112\3\2\2\2I\u0116"+
		"\3\2\2\2K\u011c\3\2\2\2M\u0123\3\2\2\2O\u0131\3\2\2\2Q\u0134\3\2\2\2S"+
		"\u013f\3\2\2\2U\u0141\3\2\2\2W\u014a\3\2\2\2Y\u0180\3\2\2\2[\u01a6\3\2"+
		"\2\2]\u01ab\3\2\2\2_\u01b1\3\2\2\2a\u01b3\3\2\2\2c\u01b5\3\2\2\2e\u01b7"+
		"\3\2\2\2g\u01b9\3\2\2\2i\u01bb\3\2\2\2k\u01bd\3\2\2\2m\u01bf\3\2\2\2o"+
		"\u01c1\3\2\2\2q\u01c3\3\2\2\2s\u01c5\3\2\2\2u\u01c7\3\2\2\2w\u01ca\3\2"+
		"\2\2y\u01cc\3\2\2\2{|\7w\2\2|}\7u\2\2}~\7g\2\2~\4\3\2\2\2\177\u0080\7"+
		"%\2\2\u0080\u0081\7f\2\2\u0081\u0082\7g\2\2\u0082\u0083\7h\2\2\u0083\u0084"+
		"\7k\2\2\u0084\u0085\7p\2\2\u0085\u0086\7g\2\2\u0086\6\3\2\2\2\u0087\u0088"+
		"\7p\2\2\u0088\u0089\7q\2\2\u0089\u008a\7O\2\2\u008a\u008b\7c\2\2\u008b"+
		"\u008c\7k\2\2\u008c\u008d\7p\2\2\u008d\b\3\2\2\2\u008e\u008f\7r\2\2\u008f"+
		"\u0090\7t\2\2\u0090\u0091\7k\2\2\u0091\u0092\7p\2\2\u0092\u0093\7v\2\2"+
		"\u0093\n\3\2\2\2\u0094\u0095\7r\2\2\u0095\u0096\7t\2\2\u0096\u0097\7k"+
		"\2\2\u0097\u0098\7p\2\2\u0098\u0099\7v\2\2\u0099\u009a\7n\2\2\u009a\u009b"+
		"\7p\2\2\u009b\f\3\2\2\2\u009c\u009d\7k\2\2\u009d\u009e\7h\2\2\u009e\16"+
		"\3\2\2\2\u009f\u00a0\7g\2\2\u00a0\u00a1\7n\2\2\u00a1\u00a2\7u\2\2\u00a2"+
		"\u00a3\7g\2\2\u00a3\20\3\2\2\2\u00a4\u00a5\7y\2\2\u00a5\u00a6\7j\2\2\u00a6"+
		"\u00a7\7k\2\2\u00a7\u00a8\7n\2\2\u00a8\u00a9\7g\2\2\u00a9\22\3\2\2\2\u00aa"+
		"\u00ab\7c\2\2\u00ab\u00ac\7u\2\2\u00ac\u00ad\7o\2\2\u00ad\24\3\2\2\2\u00ae"+
		"\u00af\7k\2\2\u00af\u00b0\7p\2\2\u00b0\u00b1\7x\2\2\u00b1\u00b2\7q\2\2"+
		"\u00b2\u00b3\7m\2\2\u00b3\u00b4\7g\2\2\u00b4\26\3\2\2\2\u00b5\u00b6\7"+
		"p\2\2\u00b6\u00b7\7g\2\2\u00b7\u00b8\7y\2\2\u00b8\30\3\2\2\2\u00b9\u00ba"+
		"\7r\2\2\u00ba\u00bb\7w\2\2\u00bb\u00bc\7u\2\2\u00bc\u00bd\7j\2\2\u00bd"+
		"\u00be\7V\2\2\u00be\u00bf\7q\2\2\u00bf\u00c0\7U\2\2\u00c0\u00c1\7v\2\2"+
		"\u00c1\u00c2\7c\2\2\u00c2\u00c3\7e\2\2\u00c3\u00c4\7m\2\2\u00c4\32\3\2"+
		"\2\2\u00c5\u00c6\7u\2\2\u00c6\u00c7\7g\2\2\u00c7\u00c8\7v\2\2\u00c8\u00c9"+
		"\7V\2\2\u00c9\u00ca\7q\2\2\u00ca\u00cb\7r\2\2\u00cb\u00cc\7Q\2\2\u00cc"+
		"\u00cd\7h\2\2\u00cd\u00ce\7U\2\2\u00ce\u00cf\7v\2\2\u00cf\u00d0\7c\2\2"+
		"\u00d0\u00d1\7e\2\2\u00d1\u00d2\7m\2\2\u00d2\34\3\2\2\2\u00d3\u00d4\7"+
		"<\2\2\u00d4\36\3\2\2\2\u00d5\u00d6\7t\2\2\u00d6\u00d7\7g\2\2\u00d7\u00d8"+
		"\7v\2\2\u00d8\u00d9\7w\2\2\u00d9\u00da\7t\2\2\u00da\u00db\7p\2\2\u00db"+
		" \3\2\2\2\u00dc\u00dd\7u\2\2\u00dd\u00de\7v\2\2\u00de\u00df\7t\2\2\u00df"+
		"\u00e0\7w\2\2\u00e0\u00e1\7e\2\2\u00e1\u00e2\7v\2\2\u00e2\"\3\2\2\2\u00e3"+
		"\u00e4\7#\2\2\u00e4$\3\2\2\2\u00e5\u00e6\7\61\2\2\u00e6&\3\2\2\2\u00e7"+
		"\u00e8\7,\2\2\u00e8(\3\2\2\2\u00e9\u00ea\7\'\2\2\u00ea*\3\2\2\2\u00eb"+
		"\u00ec\7/\2\2\u00ec,\3\2\2\2\u00ed\u00ee\7-\2\2\u00ee.\3\2\2\2\u00ef\u00f0"+
		"\7>\2\2\u00f0\u00f1\7>\2\2\u00f1\60\3\2\2\2\u00f2\u00f3\7@\2\2\u00f3\u00f4"+
		"\7@\2\2\u00f4\62\3\2\2\2\u00f5\u00f6\7>\2\2\u00f6\64\3\2\2\2\u00f7\u00f8"+
		"\7>\2\2\u00f8\u00f9\7?\2\2\u00f9\66\3\2\2\2\u00fa\u00fb\7@\2\2\u00fb8"+
		"\3\2\2\2\u00fc\u00fd\7@\2\2\u00fd\u00fe\7?\2\2\u00fe:\3\2\2\2\u00ff\u0100"+
		"\7?\2\2\u0100\u0101\7?\2\2\u0101<\3\2\2\2\u0102\u0103\7#\2\2\u0103\u0104"+
		"\7?\2\2\u0104>\3\2\2\2\u0105\u0106\7(\2\2\u0106\u0107\7(\2\2\u0107@\3"+
		"\2\2\2\u0108\u0109\7~\2\2\u0109\u010a\7~\2\2\u010aB\3\2\2\2\u010b\u010c"+
		"\7`\2\2\u010cD\3\2\2\2\u010d\u010e\7d\2\2\u010e\u010f\7q\2\2\u010f\u0110"+
		"\7q\2\2\u0110\u0111\7n\2\2\u0111F\3\2\2\2\u0112\u0113\7k\2\2\u0113\u0114"+
		"\7p\2\2\u0114\u0115\7v\2\2\u0115H\3\2\2\2\u0116\u0117\7h\2\2\u0117\u0118"+
		"\7n\2\2\u0118\u0119\7q\2\2\u0119\u011a\7c\2\2\u011a\u011b\7v\2\2\u011b"+
		"J\3\2\2\2\u011c\u011d\7U\2\2\u011d\u011e\7v\2\2\u011e\u011f\7t\2\2\u011f"+
		"\u0120\7k\2\2\u0120\u0121\7p\2\2\u0121\u0122\7i\2\2\u0122L\3\2\2\2\u0123"+
		"\u0124\7x\2\2\u0124\u0125\7q\2\2\u0125\u0126\7k\2\2\u0126\u0127\7f\2\2"+
		"\u0127N\3\2\2\2\u0128\u0129\7v\2\2\u0129\u012a\7t\2\2\u012a\u012b\7w\2"+
		"\2\u012b\u0132\7g\2\2\u012c\u012d\7h\2\2\u012d\u012e\7c\2\2\u012e\u012f"+
		"\7n\2\2\u012f\u0130\7u\2\2\u0130\u0132\7g\2\2\u0131\u0128\3\2\2\2\u0131"+
		"\u012c\3\2\2\2\u0132P\3\2\2\2\u0133\u0135\5y=\2\u0134\u0133\3\2\2\2\u0135"+
		"\u0136\3\2\2\2\u0136\u0134\3\2\2\2\u0136\u0137\3\2\2\2\u0137R\3\2\2\2"+
		"\u0138\u0139\5Q)\2\u0139\u013a\5a\61\2\u013a\u013b\5Q)\2\u013b\u0140\3"+
		"\2\2\2\u013c\u013d\5a\61\2\u013d\u013e\5Q)\2\u013e\u0140\3\2\2\2\u013f"+
		"\u0138\3\2\2\2\u013f\u013c\3\2\2\2\u0140T\3\2\2\2\u0141\u0145\5g\64\2"+
		"\u0142\u0144\13\2\2\2\u0143\u0142\3\2\2\2\u0144\u0147\3\2\2\2\u0145\u0146"+
		"\3\2\2\2\u0145\u0143\3\2\2\2\u0146\u0148\3\2\2\2\u0147\u0145\3\2\2\2\u0148"+
		"\u0149\5g\64\2\u0149V\3\2\2\2\u014a\u014f\5w<\2\u014b\u014e\5w<\2\u014c"+
		"\u014e\5y=\2\u014d\u014b\3\2\2\2\u014d\u014c\3\2\2\2\u014e\u0151\3\2\2"+
		"\2\u014f\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150X\3\2\2\2\u0151\u014f"+
		"\3\2\2\2\u0152\u0153\7v\2\2\u0153\u0154\7q\2\2\u0154\u0155\7K\2\2\u0155"+
		"\u0156\7p\2\2\u0156\u0181\7v\2\2\u0157\u0158\7v\2\2\u0158\u0159\7q\2\2"+
		"\u0159\u015a\7N\2\2\u015a\u015b\7q\2\2\u015b\u015c\7p\2\2\u015c\u0181"+
		"\7i\2\2\u015d\u015e\7v\2\2\u015e\u015f\7q\2\2\u015f\u0160\7H\2\2\u0160"+
		"\u0161\7n\2\2\u0161\u0162\7q\2\2\u0162\u0163\7c\2\2\u0163\u0181\7v\2\2"+
		"\u0164\u0165\7v\2\2\u0165\u0166\7q\2\2\u0166\u0167\7F\2\2\u0167\u0168"+
		"\7q\2\2\u0168\u0169\7w\2\2\u0169\u016a\7d\2\2\u016a\u016b\7n\2\2\u016b"+
		"\u0181\7g\2\2\u016c\u016d\7v\2\2\u016d\u016e\7q\2\2\u016e\u016f\7U\2\2"+
		"\u016f\u0170\7v\2\2\u0170\u0171\7t\2\2\u0171\u0172\7k\2\2\u0172\u0173"+
		"\7p\2\2\u0173\u0181\7i\2\2\u0174\u0175\7c\2\2\u0175\u0176\7r\2\2\u0176"+
		"\u0177\7r\2\2\u0177\u0178\7g\2\2\u0178\u0179\7p\2\2\u0179\u0181\7f\2\2"+
		"\u017a\u017b\7n\2\2\u017b\u017c\7g\2\2\u017c\u017d\7p\2\2\u017d\u017e"+
		"\7i\2\2\u017e\u017f\7v\2\2\u017f\u0181\7j\2\2\u0180\u0152\3\2\2\2\u0180"+
		"\u0157\3\2\2\2\u0180\u015d\3\2\2\2\u0180\u0164\3\2\2\2\u0180\u016c\3\2"+
		"\2\2\u0180\u0174\3\2\2\2\u0180\u017a\3\2\2\2\u0181Z\3\2\2\2\u0182\u0183"+
		"\7\61\2\2\u0183\u0184\7\61\2\2\u0184\u0188\3\2\2\2\u0185\u0187\n\2\2\2"+
		"\u0186\u0185\3\2\2\2\u0187\u018a\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0189"+
		"\3\2\2\2\u0189\u018c\3\2\2\2\u018a\u0188\3\2\2\2\u018b\u018d\7\17\2\2"+
		"\u018c\u018b\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u01a7"+
		"\7\f\2\2\u018f\u0190\7\61\2\2\u0190\u0191\7,\2\2\u0191\u0195\3\2\2\2\u0192"+
		"\u0194\13\2\2\2\u0193\u0192\3\2\2\2\u0194\u0197\3\2\2\2\u0195\u0196\3"+
		"\2\2\2\u0195\u0193\3\2\2\2\u0196\u0198\3\2\2\2\u0197\u0195\3\2\2\2\u0198"+
		"\u0199\7,\2\2\u0199\u01a7\7\61\2\2\u019a\u019b\7\61\2\2\u019b\u019c\7"+
		",\2\2\u019c\u019d\7,\2\2\u019d\u01a1\3\2\2\2\u019e\u01a0\13\2\2\2\u019f"+
		"\u019e\3\2\2\2\u01a0\u01a3\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a1\u019f\3\2"+
		"\2\2\u01a2\u01a4\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a4\u01a5\7,\2\2\u01a5"+
		"\u01a7\7\61\2\2\u01a6\u0182\3\2\2\2\u01a6\u018f\3\2\2\2\u01a6\u019a\3"+
		"\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01a9\b.\2\2\u01a9\\\3\2\2\2\u01aa\u01ac"+
		"\t\3\2\2\u01ab\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ad"+
		"\u01ae\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0\b/\2\2\u01b0^\3\2\2\2\u01b1"+
		"\u01b2\7=\2\2\u01b2`\3\2\2\2\u01b3\u01b4\7\60\2\2\u01b4b\3\2\2\2\u01b5"+
		"\u01b6\7.\2\2\u01b6d\3\2\2\2\u01b7\u01b8\7?\2\2\u01b8f\3\2\2\2\u01b9\u01ba"+
		"\7$\2\2\u01bah\3\2\2\2\u01bb\u01bc\7*\2\2\u01bcj\3\2\2\2\u01bd\u01be\7"+
		"+\2\2\u01bel\3\2\2\2\u01bf\u01c0\7}\2\2\u01c0n\3\2\2\2\u01c1\u01c2\7\177"+
		"\2\2\u01c2p\3\2\2\2\u01c3\u01c4\7]\2\2\u01c4r\3\2\2\2\u01c5\u01c6\7_\2"+
		"\2\u01c6t\3\2\2\2\u01c7\u01c8\7]\2\2\u01c8\u01c9\7_\2\2\u01c9v\3\2\2\2"+
		"\u01ca\u01cb\t\4\2\2\u01cbx\3\2\2\2\u01cc\u01cd\t\5\2\2\u01cdz\3\2\2\2"+
		"\20\2\u0131\u0136\u013f\u0145\u014d\u014f\u0180\u0188\u018c\u0195\u01a1"+
		"\u01a6\u01ad\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}